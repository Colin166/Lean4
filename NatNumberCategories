import Mathlib

open Nat
open BigOperators
open Finset

/- This file defines abundant, semi-perfect / pseudoperfect, deficient, and weird numbers
  Abundant := A number is called abundant if its proper divisors add to more than itself
  SemiPerfect := A number is semi-perfect / pseudoperfect if at least one subset of its proper divisors adds to itself
  Deficient := A number is deficient if the sum of its proper divisors is less than itself
  Weird := A number is weird if it is abundant and NOT semi-perfect
  I have excluded zero from the definitions because zero is also excluded from the Nat.Perfect definition.
-/
def Nat.Abundant (n : ℕ) : Prop := ∑ i in Nat.properDivisors n, i > n ∧ 0 < n

def Nat.SemiPerfect (n : ℕ) : Prop := ∃ s : Finset ℕ, s ∈ Finset.powerset (Nat.properDivisors n) ∧ ∑ i in s, i = n ∧ 0 < n

def Nat.WeirdNumber (n : ℕ) : Prop := Nat.Abundant n ∧ ¬ Nat.SemiPerfect n

def Nat.Deficient (n : ℕ) : Prop := ∑ i in Nat.properDivisors n, i < n ∧ 0 < n

theorem OneDeficient : Nat.Deficient 1 := by
  dsimp [Deficient]
  norm_num

theorem DeficientNotAbundantOrPerfect (n : ℕ) (hn : 0 < n) : Nat.Deficient n ↔ ¬ (Nat.Abundant n ∨ Nat.Perfect n) := by
  rw [not_or]; dsimp [Nat.Deficient, Nat.Abundant, Nat.Perfect];
  constructor; rintro ⟨h1, h2⟩; rw [not_and_or, not_and_or]
  · constructor;
    left; exact Nat.lt_asymm h1; left; exact Nat.ne_of_lt h1
  · rintro ⟨h1, h2⟩;
    rw [not_and_or] at h1; rw [not_and_or] at h2
    constructor
    have f1 : ¬∑ i in properDivisors n, i > n := by
      rcases h1 with w1 | w2; assumption; contradiction
    have f2 : ¬∑ i in properDivisors n, i = n := by
      rcases h2 with w1 | w2; assumption; contradiction
    rw [not_lt] at f1; rw [← ne_eq] at f2
    exact lt_of_le_of_ne f1 f2
    exact hn

theorem PerfectNotAbundantOrDeficient (n : ℕ) (hn : 0 < n) : Nat.Perfect n ↔ ¬ (Nat.Abundant n ∨ Nat.Deficient n) := by
  rw [Iff.comm, ← not_iff];
  dsimp [Nat.Abundant, Nat.Perfect, Nat.Deficient]
  rintro ⟨h1, h2⟩
  have f1 : ∑ i in properDivisors n, i > n ∧ 0 < n ↔ ∑ i in properDivisors n, i > n := by
    exact and_iff_left hn
  have f2 : ∑ i in properDivisors n, i < n ∧ 0 < n ↔ ∑ i in properDivisors n, i < n := by
    exact and_iff_left hn
  have f3 : ∑ i in properDivisors n, i = n ∧ 0 < n ↔ ∑ i in properDivisors n, i = n := by
    exact and_iff_left hn
  rw [f1, f2, f3, lt_or_lt_iff_ne] at h1; rw [f1, f2, f3, lt_or_lt_iff_ne] at h2
  have h1' : ∑ i in properDivisors n, i ≠ n → ∑ i in properDivisors n, i = n := by exact fun a => h1 (id (Ne.symm a))
  have h2' : ∑ i in properDivisors n, i = n → ∑ i in properDivisors n, i ≠ n := by exact fun a => (h2 (h1 (h2 a)) (id a.symm)).elim
  by_cases hP : ∑ i in properDivisors n, i = n
  have contra1 := by apply h2' hP; exact hP
  exact contra1
  have contra2 := by apply h1' hP
  rw [← ne_eq] at hP
  contradiction

theorem AbundantNotPerfectOrDeficient (n : ℕ) (hn : 0 < n) : Nat.Abundant n ↔ ¬ (Nat.Perfect n ∨ Nat.Deficient n) := by
  rw [not_or]; dsimp [Nat.Deficient, Nat.Abundant, Nat.Perfect];
  constructor; rintro ⟨h1, h2⟩; rw [not_and_or, not_and_or]
  · constructor;
    left; exact Nat.ne_of_gt h1; left; exact Nat.lt_asymm h1
  · rintro ⟨h1, h2⟩;
    rw [not_and_or] at h1; rw [not_and_or] at h2
    constructor
    rcases h1 with w1 | w2; rcases h2 with f1 | f2
    rw [← ne_eq] at w1; rw [not_lt] at f1
    exact Nat.lt_of_le_of_ne f1 (id (Ne.symm w1))
    repeat contradiction
    exact hn

theorem DeficientOrPerfectOrAbundant (n : ℕ) (hn : 0 < n) : Nat.Deficient n ∨ Nat.Abundant n ∨ Nat.Perfect n := by
  dsimp [Nat.Deficient, Nat.Perfect, Nat.Abundant]
  by_contra hc
  rw [not_or, not_or] at hc
  rcases hc with ⟨hc1, ⟨hc2, hc3⟩⟩
  have f1 : ∑ i in properDivisors n, i > n ∧ 0 < n ↔ ∑ i in properDivisors n, i > n := by
    exact and_iff_left hn
  have f2 : ∑ i in properDivisors n, i < n ∧ 0 < n ↔ ∑ i in properDivisors n, i < n := by
    exact and_iff_left hn
  have f3 : ∑ i in properDivisors n, i = n ∧ 0 < n ↔ ∑ i in properDivisors n, i = n := by
    exact and_iff_left hn
  rw [f1] at hc2; rw [f2] at hc1; rw [f3] at hc3
  rw [not_lt] at hc1; rw [not_lt] at hc2
  have f4 : ∑ i in properDivisors n, i = n := by exact le_antisymm hc2 hc1
  contradiction

theorem NotSemiPerfectRw (n : ℕ) :
  (¬ Nat.SemiPerfect n) ↔ ∀ (s : Finset ℕ), s ∈ Finset.powerset (Nat.properDivisors n)
  → (∑ i in s, i ≠ n ∨ 0 ≥ n) := by
  dsimp [Nat.SemiPerfect]; rw [not_exists]; constructor;
  intro h s;
  have hs : ¬(s ∈ powerset (properDivisors n) ∧ ∑ i in s, i = n ∧ 0 < n) := by apply h s
  rw [not_and, not_and_or, not_lt] at hs; exact hs
  intro h x;
  have hx : x ∈ powerset (properDivisors n) → ¬∑ i in x, i = n ∨ 0 ≥ n := by apply h x
  rw [not_and, not_and_or, not_lt]; exact fun a => h x a

theorem PerfectImpSemiPerfect (n : ℕ) : Nat.Perfect n → Nat.SemiPerfect n := by
  intro h; obtain ⟨h1, h2⟩ := h; use properDivisors n;
  constructor; exact mem_powerset_self (properDivisors n)
  constructor <;> assumption

theorem PrimeNotAbundant (n : ℕ) : Nat.Prime n → ¬ Nat.Abundant n := by
  intro h h1; rcases h1 with ⟨h1, h2⟩
  have h3 : ∑ i in properDivisors n, i = 1 := by exact sum_properDivisors_eq_one_iff_prime.mpr h
  have h4 : n > 1 := by exact Prime.one_lt h
  have h5 : ∑ i in properDivisors n, i > 1 := by exact Nat.lt_trans h4 h1
  have h6 : 1 > 1 := by
    calc
      1 = ∑ i in properDivisors n, i := by apply Eq.symm h3
      _ > 1 := by rel [h5]
  contradiction

theorem NotSemiPerfectNotPerfect (n : ℕ) : ¬ Nat.SemiPerfect n → ¬ Nat.Perfect n := by
  rw [not_imp_not]; exact PerfectImpSemiPerfect n

theorem PrimeNotSemiPerfect (n : ℕ) : Nat.Prime n → ¬ Nat.SemiPerfect n := by
  intro h; rw [NotSemiPerfectRw]
  have h1 : powerset (properDivisors n) = {∅, {1}} := by rw [Prime.properDivisors h]; exact rfl
  have h2 : n > 1 := by exact Prime.one_lt h
  rw [h1]; rintro s hs; have hs' : s = ∅ ∨ s = {1} := by exact List.mem_pair.mp hs
  rcases hs' with hs1 | hs2
  <;> {left; repeat (first | simp [hs1]; linarith | simp [hs2]; linarith)}

theorem PrimeNotPerfect (n : ℕ) : Nat.Prime n → ¬ Nat.Perfect n := by
  intro h; have h1 : ¬ SemiPerfect n := by exact PrimeNotSemiPerfect n h
  exact NotSemiPerfectNotPerfect n h1
