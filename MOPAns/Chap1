import Mathlib

/- Section 1 : Proof by Calculation -/
-- 1.2.2 Example
example {r s : ℝ} (h1 : s = 3) (h2 : r + 2 * s = -1) : r = -7 :=
  calc
    r = r + 2 * s - 2 * s := by rw [add_sub_cancel_right]
    _ = -1 - 2 * s := by rw [h2]
    _ = -1 - 2 * 3 := by rw [h1]
    _ = -7 := by norm_num
-- 1.2.3 Example
example {a b m n : ℤ} (h1 : a * m + b * n = 1) (h2 : b ^ 2 = 2 * a ^ 2) :
    (2 * a * n + b * m) ^ 2 = 2 :=
  calc
    (2 * a * n + b * m) ^ 2
      = 2 * (a * m + b * n) ^ 2 + (m ^ 2 - 2 * n ^ 2) * (b ^ 2 - 2 * a ^ 2) := by ring
    _ = 2 * 1 ^ 2 + (m ^ 2 - 2 * n ^ 2) * (2 * a ^ 2 - 2 * a ^ 2) := by rw [h1, h2]
    _ = 2 := by rw [sub_self, mul_zero, add_zero, one_pow, mul_one]
-- 1.2.4 Example
example {a b c d e f : ℤ} (h1 : a * d = b * c) (h2 : c * f = d * e) :
    d * (a * f - b * e) = 0 :=
  calc
    d * (a * f - b * e)
      = (a * d) * f - b * (d * e) := by ring
    _ = (b * c) * f - b * (c * f) := by rw [h1, h2]
    _ = 0 := by ring
-- 1.3.1 Example
example {a b : ℤ} (h1 : a = 2 * b + 5) (h2 : b = 3) : a = 11 := by
  rw [h2] at h1
  omega
example {a b : ℤ} (h1 : a = 2 * b + 5) (h2 : b = 3) : a = 11 := by
  calc
    a = 2 * b + 5 := h1
    _ = 11 := by {rw [h2]; ring}
-- 1.3.2 Example
example {x : ℤ} (h1 : x + 4 = 2) : x = -2 := by
  rw [← eq_sub_iff_add_eq] at h1
  omega
example {x : ℤ} (h1 : x + 4 = 2) : x = -2 := by
  calc
    x = x + 4 - 4 := by rw [add_sub_cancel_right]
    _ = - 2 := by {rw [h1]; ring}
-- 1.3.3 Example
example {a b : ℝ} (h1 : a - 5 * b = 4) (h2 : b + 2 = 3) : a = 9 := by
  rw [← eq_sub_iff_add_eq] at h2
  rw [h2, sub_eq_iff_eq_add] at h1
  rw [h1]
  ring
example {a b : ℝ} (h1 : a - 5 * b = 4) (h2 : b + 2 = 3) : a = 9 := by
  calc
    a = (a - 5 * b) + 5 * (b + 2 - 2) := by ring
    _ = 9 := by rw [h1, h2]; norm_num
-- 1.3.4 Example
example {w : ℚ} (h1 : 3 * w + 1 = 4) : w = 1 := by
  rw [← eq_sub_iff_add_eq, mul_left_eq_iff_eq_invOf_mul] at h1
  rw [h1]
  norm_num
example {w : ℚ} (h1 : 3 * w + 1 = 4) : w = 1 := by
  calc
    w = (3 * w + 1) / 3 - 1 / 3 := by
      rw [add_div, add_sub_cancel_right, mul_div_right_comm, div_self (by positivity), one_mul]
    _ = 1 := by rw [h1]; ring
-- 1.3.5 Example
example {x : ℤ} (h1 : 2 * x + 3 = x) : x = -3 := by
  rw [← eq_sub_iff_add_eq', Int.two_mul, sub_add_cancel_left, Int.eq_neg_comm] at h1
  exact h1
example {x : ℤ} (h1 : 2 * x + 3 = x) : x = -3 := by
  calc
    x = (2 * x + 3) - x - 3 := by ring
    _ = - 3 := by {nth_rw 1 [h1, sub_eq_iff_eq_add, sub_self, Int.add_left_neg]}
-- 1.3.6 Example
example {x y : ℤ} (h1 : 2 * x - y = 4) (h2 : y - x + 1 = 2) : x = 5 :=
  calc
    x = (2 * x - y) + (y - x + 1) - 1 := by ring
    _ = 5 := by rw [h1, h2]; ring
-- 1.3.7 Example
example {u v : ℚ} (h1 : u + 2 * v = 4) (h2 : u - 2 * v = 6) : u = 5 := by
  calc
    u = ((u + 2 * v) + (u - 2 * v)) / 2 := by rw [add_add_sub_cancel, half_add_self]
    _ = 5 := by rw [h1, h2]; ring
-- 1.3.8 Example
example {x y : ℝ} (h1 : x + y = 4) (h2 : 5 * x - 3 * y = 4) : x = 2 :=
  calc
    x = (3 * (x + y) + (5 * x - 3 * y)) / 8 := by ring
    _ = 2 := by rw [h1, h2]; ring
-- 1.3.9 Example
example {a b : ℚ} (h1 : a - 3 = 2 * b) : a ^ 2 - a + 3 = 4 * b ^ 2 + 10 * b + 9 :=
  calc
    a ^ 2 - a + 3
      = (a - 3) ^ 2 + 5 * (a - 3) + 9 := by ring
    _ = (2 * b) ^ 2 + 5 * (2 * b) + 9 := by rw [h1]
    _ = 4 * b ^ 2 + 10 * b + 9 := by ring
-- 1.3.10 Example
example {z : ℝ} (h1 : z ^ 2 - 2 = 0) : z ^ 4 - z ^ 3 - z ^ 2 + 2 * z + 1 = 3 :=
  calc
    z ^ 4 - z ^ 3 - z ^ 2 + 2 * z + 1
      = (z ^ 2 - z + 1) * (z ^ 2 - 2) + 3 := by ring
    _ = 3 := by rw [h1, mul_zero, zero_add]
-- 1.3.11 Exercises
example {x y : ℝ} (h1 : x = 3) (h2 : y = 4 * x - 3) : y = 9 := by
  rw [h2, h1]
  ring
example {x y : ℝ} (h1 : x = 3) (h2 : y = 4 * x - 3) : y = 9 := by
  calc
    y = 4 * x - 3 := h2
    _ = 9 := by rw [h1]; ring

example {a b : ℤ} (h : a - b = 0) : a = b := Int.eq_of_sub_eq_zero h
example {a b : ℤ} (h : a - b = 0) : a = b := by
  calc
    a = a - b + b := by rw [sub_add_cancel]
    _ = b := by rw [h, zero_add]

example {x y : ℤ} (h1 : x - 3 * y = 5) (h2 : y = 3) : x = 14 := by
  rw [h2, sub_eq_iff_eq_add] at h1
  simp [h1]
example {x y : ℤ} (h1 : x - 3 * y = 5) (h2 : y = 3) : x = 14 := by
  calc
    x = x - 3 * y + 3 * y := by rw [sub_add_cancel]
    _ = 14 := by rw [h1, h2]; norm_num

example {p q : ℚ} (h1 : p - 2 * q = 1) (h2 : q = -1) : p = -1 := by
  rw [h2, sub_eq_iff_eq_add] at h1
  rw [h1]
  ring
example {p q : ℚ} (h1 : p - 2 * q = 1) (h2 : q = -1) : p = -1 := by
  calc
    p = p - 2 * q + 2 * q := by rw [sub_add_cancel]
    _ = 1 + 2 * -1 := by rw [h1, h2]
    _ = -1 := by norm_num

example {x y : ℚ} (h1 : y + 1 = 3) (h2 : x + 2 * y = 3) : x = -1 := by
  calc
    x = x + 2 * y - 2 * (y + 1) + 2 := by ring
    _ = 3 - 2 * 3 + 2 := by rw [h1, h2]
    _ = -1 := by ring

example {p q : ℤ} (h1 : p + 4 * q = 1) (h2 : q - 1 = 2) : p = -11 := by
  rw [sub_eq_iff_eq_add.mp h2, ← eq_sub_iff_add_eq] at h1
  exact h1
example {p q : ℤ} (h1 : p + 4 * q = 1) (h2 : q - 1 = 2) : p = -11 := by
  calc
    p = p + 4 * q - 4 * (q - 1) - 4 := by ring
    _ = -11 := by simp only [h1, h2, Int.reduceMul, Int.reduceSub, Int.reduceNeg]

example {a b c : ℝ} (h1 : a + 2 * b + 3 * c = 7) (h2 : b + 2 * c = 3)
    (h3 : c = 1) : a = 2 := by
  rw [h3, ← eq_sub_iff_add_eq] at h2
  rw [h2, h3, ← eq_sub_iff_add_eq, ← eq_sub_iff_add_eq] at h1
  rw [h1]
  ring
example {a b c : ℝ} (h1 : a + 2 * b + 3 * c = 7) (h2 : b + 2 * c = 3)
    (h3 : c = 1) : a = 2 := by
      calc
        a = a + 2 * b + 3 * c - 2 * (b + 2 * c) + c := by ring
        _ = 2 := by nlinarith

example {u v : ℚ} (h1 : 4 * u + v = 3) (h2 : v = 2) : u = 1 / 4 := by
  rw [h2, ← eq_sub_iff_add_eq] at h1
  rw [show (1:ℚ) / 4 = (3 - 2) / 4 by ring, ← h1]
  ring
example {u v : ℚ} (h1 : 4 * u + v = 3) (h2 : v = 2) : u = 1 / 4 := by
  calc
    u = 1 / 4 * (4 * u + v) - 1 / 4 * v := by ring
    _ = 1 / 4 := by nlinarith

example {c : ℚ} (h1 : 4 * c + 1 = 3 * c - 2) : c = -3 := by
  nlinarith
example {c : ℚ} (h1 : 4 * c + 1 = 3 * c - 2) : c = -3 := by
  calc
    c = 4 * c + 1 - (3 * c - 2) - 3 := by ring
    _ = -3 := by rw [h1, sub_sub_sub_cancel_left, sub_eq_neg_self, sub_eq_zero]

example {p : ℝ} (h1 : 5 * p - 3 = 3 * p + 1) : p = 2 := by
  nlinarith
example {p : ℝ} (h1 : 5 * p - 3 = 3 * p + 1) : p = 2 := by
  calc
    p = ((5 * p - 3) - (3 * p + 1)) / 2 + 2 := by ring
    _ = 2 := by rw [h1, add_sub_add_left_eq_sub, add_left_eq_self, sub_self, zero_div]

example {x y : ℤ} (h1 : 2 * x + y = 4) (h2 : x + y = 1) : x = 3 := by
  nlinarith
example {x y : ℤ} (h1 : 2 * x + y = 4) (h2 : x + y = 1) : x = 3 := by
  calc
    x = (2 * x + y) - (x + y) := by ring
    _ = 3 := by rw [h1, h2]; rfl

example {a b : ℝ} (h1 : a + 2 * b = 4) (h2 : a - b = 1) : a = 2 :=
  calc
    a = ((a + 2 * b) + 2 * (a - b)) / 3 := by ring
    _ = 2 := by linarith

example {u v : ℝ} (h1 : u + 1 = v) : u ^ 2 + 3 * u + 1 = v ^ 2 + v - 1 := by nlinarith

example {t : ℚ} (ht : t ^ 2 - 4 = 0) :
    t ^ 4 + 3 * t ^ 3 - 3 * t ^ 2 - 2 * t - 2 = 10 * t + 2 := by
      calc
        t ^ 4 + 3 * t ^ 3 - 3 * t ^ 2 - 2 * t - 2
          = t ^ 2 * (t ^ 2 - 4) + 3 * t * (t ^ 2 - 4) + 10 * t + 2 := by nlinarith
        _ = 10 * t + 2 := by simp only [ht, mul_zero, add_zero, zero_add]

example {x y : ℝ} (h1 : x + 3 = 5) (h2 : 2 * x - y * x = 0) : y = 2 := by nlinarith

example {p q r : ℚ} (h1 : p + q + r = 0) (h2 : p * q + p * r + q * r = 2) :
    p ^ 2 + q ^ 2 + r ^ 2 = -4 := by nlinarith

-- 1.4.2 Example
example {r s : ℚ} (h1 : s + 3 ≥ r) (h2 : s + r ≤ 3) : r ≤ 3 :=
  calc
    r = (s + r + r - s) / 2 := by ring
    _ ≤ (3 + (s + 3) - s) / 2 := by rel [h1, h2]
    _ = 3 := by ring
-- 1.4.3 Example
example {x y : ℝ} (h1 : y ≤ x + 5) (h2 : x ≤ -2) : x + y < 2 := by
  calc
    x + y ≤ (-2) + ((x) + 5) := by rel [h1, h2]
    _     ≤ -2 + ((-2) + 5) := by rel [h2]
    _     < 2 := by norm_num
-- 1.4.4 Example
example {u v x y A B : ℝ} (h2 : A ≤ 1) (h3 : 1 ≤ B) (h4 : x ≤ B)
    (h5 : y ≤ B) (h6 : 0 ≤ u) (h7 : 0 ≤ v) (h8 : u < A) (h9 : v < A) :
    u * y + v * x + u * v < 3 * A * B :=
  calc
    u * y + v * x + u * v
      ≤ u * B + v * B + u * v := by nlinarith
    _ ≤ A * B + A * B + A * v := by nlinarith
    _ ≤ A * B + A * B + 1 * v := by gcongr
    _ ≤ A * B + A * B + B * v := by gcongr
    _ < A * B + A * B + B * A := by gcongr
    _ = 3 * A * B := by nlinarith
-- 1.4.5 Example
example {t : ℚ} (ht : t ≥ 10) : t ^ 2 - 3 * t - 17 ≥ 5 :=
  calc
    t ^ 2 - 3 * t - 17
      = t * t - 3 * t - 17 := by ring
    _ ≥ 10 * t - 3 * t - 17 := by rel [ht]
    _ = 7 * t - 17 := by ring
    _ ≥ 7 * 10 - 17 := by rel [ht]
    _ ≥ 5 := by norm_num
-- 1.4.6 Example
example {n : ℤ} (hn : n ≥ 5) : n ^ 2 > 2 * n + 11 := by nlinarith
-- 1.4.8 Example
example {x y : ℝ} (h : x ^ 2 + y ^ 2 ≤ 1) : (x + y) ^ 2 < 3 :=
  calc
    (x + y) ^ 2 ≤ (x + y) ^ 2 + (x - y) ^ 2 := le_add_of_nonneg_right (sq_nonneg (x - y))
    _ = 2 * (x ^ 2 + y ^ 2) := by ring
    _ ≤ 2 * 1 := by rel [h]
    _ < 3 := by norm_num
-- 1.4.9 Example
example {a b : ℚ} (h1 : a ≥ 0) (h2 : b ≥ 0) (h3 : a + b ≤ 8) :
    3 * a * b + a ≤ 7 * b + 72 :=
  calc
    3 * a * b + a
      ≤ 2 * b ^ 2 + a ^ 2 + (3 * a * b + a) := by nlinarith
    _ = 2 * ((a + b) * b) + (a + b) * a + a := by nlinarith
    _ ≤ 2 * (8 * b) + 8 * a + a := by nlinarith
    _ = 7 * b + 9 * (a + b) := by nlinarith
    _ ≤ 7 * b + 9 * 8 := by nlinarith
    _ = 7 * b + 72 := by nlinarith
-- 1.4.11 Exercises
example {x y : ℤ} (h1 : x + 3 ≥ 2 * y) (h2 : 1 ≤ y) : x ≥ -1 := by
  nlinarith
example {x y : ℤ} (h1 : x + 3 ≥ 2 * y) (h2 : 1 ≤ y) : x ≥ -1 := by
  calc
    x = x + 3 - 3 := by rw [Int.add_sub_cancel]
    _ ≥ 2 * y - 3 := by rel [h1]
    _ ≥ 2 * 1 - 3 := by rel [h2]
    _ ≥ -1 := by norm_num

example {a b : ℚ} (h1 : 3 ≤ a) (h2 : a + 2 * b ≥ 4) : a + b ≥ 3 := by
  nlinarith
example {a b : ℚ} (h1 : 3 ≤ a) (h2 : a + 2 * b ≥ 4) : a + b ≥ 3 := by
  calc
    a + b = (a + 2 * b) / 2 + a / 2 := by ring
    _     ≥ 4 / 2 + 3 / 2 := by rel [h1, h2]
    _     ≥ 3 := by norm_num

example {x : ℤ} (hx : x ≥ 9) : x ^ 3 - 8 * x ^ 2 + 2 * x ≥ 3 := by
  nlinarith

example {n : ℤ} (hn : n ≥ 10) : n ^ 4 - 2 * n ^ 2 > 3 * n ^ 3 := by
  suffices n ^ 2 > 3 * n + 2 by
    nlinarith
  nlinarith
  -- I'm not sure how to do this by calc

example {n : ℤ} (h1 : n ≥ 5) : n ^ 2 - 2 * n + 3 > 14 := by nlinarith
example {n : ℤ} (h1 : n ≥ 5) : n ^ 2 - 2 * n + 3 > 14 := by
  have h : n ^ 2 - 2 * n ≥ 15 := by nlinarith
  calc
    n ^ 2 - 2 * n + 3
      = (n ^ 2 - 2 * n) + 3 := by rw [add_left_cancel_iff]
    _ ≥ 15 + 3 := by rel [h]
    _ > 14 := by linarith

example {x : ℚ} : x ^ 2 - 2 * x ≥ -1 := by
  by_cases hx : x ≥ 2
  · calc
      x ^ 2 - 2 * x
        = x * (x - 2) := by ring
      _ ≥ 0 := by nlinarith
      _ ≥ -1 := by norm_num
  · rw [Rat.not_le] at hx
    by_cases hx' : x ≤ 1
    <;> nlinarith

example (a b : ℝ) : a ^ 2 + b ^ 2 ≥ 2 * a * b := by
  suffices 0 ≤ (a - b) ^ 2 by
    nlinarith
  nlinarith
  -- I'm also unsure of how to do a calc block here
