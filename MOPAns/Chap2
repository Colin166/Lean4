import Mathlib

/-! NOTE : There will be a lot of extraneous hypotheses due to the sheer power of the `nlinarith`
  tactic. In professional Lean code, this would be disallowed. Extraneous hypotheses must be
  avoided by either having them as an underscore `_` (e.g. in an `obtain` tactic, such as :
  `obtain ⟨h1, _⟩ := h`) or deleted. -/

/- Section 2 : Proofs with Structure -/
-- 2.1.3 Example
example {r s : ℚ} (h1 : s + 3 ≥ r) (h2 : s + r ≤ 3) : r ≤ 3 := by
  have h3 : r ≤ 3 + s := by nlinarith
  have h4 : r ≤ 3 - s := by nlinarith
  calc
    r = (r + r) / 2 := by nlinarith -- justify with one tactic
    _ ≤ (3 - s + (3 + s)) / 2 := by nlinarith -- justify with one tactic
    _ = 3 := by nlinarith -- justify with one tactic
/-! TIP : Neither h3 or h4 are used, and `nlinarith` is strong enough to solve this. -/
example {r s : ℚ} (h1 : s + 3 ≥ r) (h2 : s + r ≤ 3) : r ≤ 3 := by nlinarith

-- 2.1.6 Example
example {x y : ℤ} (hx : x + 3 ≤ 2) (hy : y + 2 * x ≥ 3) : y > 3 := by
  have h1 : x ≤ -1 := by
    rw [show -1 = 2 + -3 by norm_num, Int.le_add_iff_sub_le, Int.sub_neg]
    exact hx
  calc
    y ≥ 3 - 2 * x := by simp_all only [ge_iff_le, Int.reduceNeg, tsub_le_iff_right]
    _ ≥ 3 - 2 * (-1) := by rel [h1]
    _ > 3 := by nlinarith
/-! TIP : Again this goal can be solved with `nlinarith`. -/
example {x y : ℤ} (hx : x + 3 ≤ 2) (hy : y + 2 * x ≥ 3) : y > 3 := by nlinarith

-- 2.1.7 Example
example (a b : ℝ) (h1 : -b ≤ a) (h2 : a ≤ b) : a ^ 2 ≤ b ^ 2 := by
  have h3 : 0 ≤ b + a := neg_le_iff_add_nonneg'.mp h1
  have h4 : 0 ≤ b - a := sub_nonneg_of_le h2
  calc
    a ^ 2 ≤ a ^ 2 + (b + a) * (b - a) := by nlinarith
    _     = b ^ 2 := by ring
/-! TIP : The extraneous hypotheses (underlined in yellow in VSCode) can be replaced with
  underscores. -/
example (a b : ℝ) (h1 : -b ≤ a) (h2 : a ≤ b) : a ^ 2 ≤ b ^ 2 := by
  have _ : 0 ≤ b + a := neg_le_iff_add_nonneg'.mp h1
  have _ : 0 ≤ b - a := sub_nonneg_of_le h2
  calc
    a ^ 2 ≤ a ^ 2 + (b + a) * (b - a) := by nlinarith
    _     = b ^ 2 := by ring
/-! NOTE : The book tactics are different from Mathlib. This is why `nlinarith` is so powerful. -/
example (a b : ℝ) (h1 : -b ≤ a) (h2 : a ≤ b) : a ^ 2 ≤ b ^ 2 := by nlinarith

-- 2.1.8 Example
example (a b : ℝ) (h : a ≤ b) : a ^ 3 ≤ b ^ 3 := by
  have h1 : 0 ≤ b - a := sub_nonneg_of_le h
  have h2 : 0 ≤ ((b - a) * ((b - a) ^ 2 + 3 * (b + a) ^ 2)) / 4 := by nlinarith
  calc
    a ^ 3 ≤ a ^ 3 + ((b - a) * ((b - a) ^ 2 + 3 * (b + a) ^ 2)) / 4 := by nlinarith
    _     = b ^ 3 := by ring

-- 2.1.9 Exercises
-- 1
example {x : ℚ} (h1 : x ^ 2 = 4) (h2 : 1 < x) : x = 2 := by
  have h : x * (x + 2) = 2 * (x + 2) := by
    calc
      x * (x + 2)
        = x ^ 2 + 2 * x := by ring
      _ = 4 + 2 * x := by rw [h1]
      _ = 2 * (x + 2) := by ring
  nlinarith -- If using book specific tactics, use `cancel` here.
-- 2
example {n : ℤ} (hn : n ^ 2 + 4 = 4 * n) : n = 2 := by
  have _ : (n - 2) ^ 2 = 0 := by nlinarith
  have h' : (n - 2) = 0 := by nlinarith
  nlinarith
-- 3
example (x y : ℚ) (h : x * y = 1) (h2 : x ≥ 1) : y ≤ 1 := by
  calc
    y = 1 / x := eq_one_div_of_mul_eq_one_right h
    _ ≤ 1 / 1 := by rel [h2]
    _ = 1 := div_one 1
example (x y : ℚ) (h : x * y = 1) (h2 : x ≥ 1) : y ≤ 1 := by
  nlinarith

-- 2.2.2 Example
example {y : ℝ} : y ^ 2 + 1 ≠ 0 := by
  rw [add_comm]
  have h : 1 + y ^ 2 > 0 := by
    refine add_pos_of_pos_of_nonneg ?ha ?hb
    · exact Real.zero_lt_one
    · exact sq_nonneg y
  exact Ne.symm (ne_of_lt h)
/-! TIP : The shorter way to write this is by a method called golfing. -/
example {y : ℝ} : y ^ 2 + 1 ≠ 0 := by
  rw [add_comm]
  exact Ne.symm (ne_of_lt (add_pos_of_pos_of_nonneg Real.zero_lt_one (sq_nonneg y)))

-- 2.2.4 Exercises
-- 1
example {m : ℤ} (hm : m + 1 = 5) : 3 * m ≠ 6 := by
  apply ne_of_gt
  linarith
-- 2
example {s : ℚ} (h1 : 3 * s ≤ -6) (h2 : 2 * s ≥ -4) : s = -2 := by
  nlinarith

-- 2.3.2 Example
lemma le_or_succ_le (a b : ℕ) : a ≤ b ∨ b + 1 ≤ a := by
  by_cases h : a ≤ b
  · exact Or.intro_left (b + 1 ≤ a) h
  · rw [Nat.not_le] at h
    exact Or.inr h
example {n : ℕ} : n ^ 2 ≠ 2 := by
  have hn := le_or_succ_le n 1
  obtain hn | hn := hn
  apply ne_of_lt
  calc
    n ^ 2 ≤ 1 ^ 2 := by rel [hn]
    _ < 2 := by nlinarith
  apply Nat.ne_of_lt'
  calc
    2 < 2 ^ 2 := by nlinarith
    _ ≤ n ^ 2 := by nlinarith

-- 2.3.4 Example
example {x : ℝ} (hx : x ^ 2 - 3 * x + 2 = 0) : x = 1 ∨ x = 2 := by
  have h1 :=
    calc
    (x - 1) * (x - 2) = x ^ 2 - 3 * x + 2 := by ring
    _ = 0 := by rw [hx]
  have h2 := eq_zero_or_eq_zero_of_mul_eq_zero h1
  obtain (h2 | h2) := h2
  · left
    linarith
  · right
    linarith
/-! TIP : The `have` and `obtain` can be put together, and a `rw` and `tauto` can make it
  shorter. The `<;>` tells Lean to do the tactic on subsequent goals. -/
example {x : ℝ} (hx : x ^ 2 - 3 * x + 2 = 0) : x = 1 ∨ x = 2 := by
  have h1 :=
    calc
    (x - 1) * (x - 2) = x ^ 2 - 3 * x + 2 := by ring
    _ = 0 := by rw [hx]
  obtain (h2 | h2) := eq_zero_or_eq_zero_of_mul_eq_zero h1 <;>
  rw [sub_eq_zero] at h2 <;>
  tauto

-- 2.3.6 Exercises
-- 1
example {x : ℚ} (h : x = 4 ∨ x = -4) : x ^ 2 + 1 = 17 := by
  obtain (h | h) := h <;>
  rw [h] <;>
  ring
-- 2
example {x : ℝ} (h : x = 1 ∨ x = 2) : x ^ 2 - 3 * x + 2 = 0 := by
  obtain (h | h) := h <;>
  rw [h] <;>
  ring
-- 3
example {t : ℚ} (h : t = -2 ∨ t = 3) : t ^ 2 - t - 6 = 0 := by
  obtain (h | h) := h <;>
  rw [h] <;>
  ring
-- 4
example {x y : ℝ} (h : x = 2 ∨ y = -2) : x * y + 2 * x = 2 * y + 4 := by
  obtain (h | h) := h <;>
  rw [h] <;>
  ring
-- 5
example {s t : ℚ} (h : s = 3 - t) : s + t = 3 ∨ s + t = 5 := by
  left
  rw [h, sub_add_cancel]
-- 6
example {a b : ℚ} (h : a + 2 * b < 0) : b < a / 2 ∨ b < - a / 2 := by
  right
  nlinarith
-- 7
example {x y : ℝ} (h : y = 2 * x + 1) : x < y / 2 ∨ x > y / 2 := by
  left
  nlinarith
-- 8
example {x : ℝ} (hx : x ^ 2 + 2 * x - 3 = 0) : x = -3 ∨ x = 1 := by
  rw [show x ^ 2 + 2 * x - 3 = (x + 3) * (x - 1) by ring] at hx
  rw [eq_neg_iff_add_eq_zero, show x = 1 ↔ x - 1 = 0 by exact Iff.symm sub_eq_zero]
  exact eq_zero_or_eq_zero_of_mul_eq_zero hx
-- 9
example {a b : ℝ} (hab : a ^ 2 + 2 * b ^ 2 = 3 * a * b) : a = b ∨ a = 2 * b := by
  have h : (a - b) * (a - 2 * b) = 0 := by
    apply Eq.symm
    calc
      0 = a ^ 2 + 2 * b ^ 2 - 3 * a * b := Eq.symm (sub_eq_zero_of_eq hab)
      _ = (a - b) * (a - 2 * b) := by ring
  rw [← sub_eq_zero, show a = 2 * b ↔ a - 2 * b = 0 by exact Iff.symm sub_eq_zero]
  exact mul_eq_zero.mp h
-- 10
example {t : ℝ} (ht : t ^ 3 = t ^ 2) : t = 1 ∨ t = 0 := by
  have h : t ^ 2 * (t - 1) = 0 := by
    apply Eq.symm
    calc
      0 = t ^ 3 - t ^ 2 := Eq.symm (sub_eq_zero_of_eq ht)
      _ = t ^ 2 * (t - 1) := by ring
  rw [← sub_eq_zero]
  rw [mul_comm, mul_eq_zero] at h
  obtain h | h := h
  · exact mul_eq_mul_left_iff.mp (congrArg (HMul.hMul t) h)
  · right
    exact pow_eq_zero h
-- 11
example {n : ℕ} : n ^ 2 ≠ 7 := by
  have hn := le_or_succ_le n 2
  obtain hn | hn := hn
  · apply ne_of_lt
    nlinarith
  · apply ne_of_gt
    nlinarith
-- 12
example {x : ℤ} : 2 * x ≠ 3 := by
  by_cases hx : x ≤ 1 <;>
  apply Int.ne_iff_lt_or_gt.mpr
  · left
    calc
      2 * x ≤ 2 * 1 := by rel [hx]
      _     < 3 := by linarith
  · right
    rw [Int.not_le, Lean.Grind.Int.lt_eq, one_add_one_eq_two] at hx
    calc
      3 < 2 * 2 := by norm_num
      _ ≤ 2 * x := by rel [hx]
-- 13
example {t : ℤ} : 5 * t ≠ 18 := by
  by_cases h : t ≤ 3
  · apply ne_of_lt
    nlinarith
  · apply ne_of_gt
    nlinarith
-- 14
example {m : ℕ} : m ^ 2 + 4 * m ≠ 46 := by
  by_cases h : m ≤ 5
  · apply ne_of_lt
    nlinarith
  · apply ne_of_gt
    nlinarith

-- 2.4.2 Example
example {p : ℚ} (hp : p ^ 2 ≤ 8) : p ≥ -5 := by
  have hp' : -3 ≤ p ∧ p ≤ 3
  · apply abs_le_of_sq_le_sq'
    calc
      p ^ 2 ≤ 9 := by nlinarith
      _ = 3 ^ 2 := by norm_num
    norm_num
  · nlinarith [hp'.1]

-- 2.4.4 Example
example {a b : ℝ} (h1 : a ^ 2 + b ^ 2 = 0) : a = 0 ∧ b = 0 := by
  have h2 : a ^ 2 = 0
  · apply le_antisymm
    calc
      a ^ 2 ≤ a ^ 2 + b ^ 2 := by nlinarith
      _ = 0 := by rw [h1]
    nlinarith
  have h3 : b ^ 2 = 0
  · apply le_antisymm
    calc
      b ^ 2 ≤ a ^ 2 + b ^ 2 := by nlinarith
      _ = 0 := by rw [h1]
    nlinarith
  constructor
  · exact pow_eq_zero h2
  · exact pow_eq_zero h3
/-! TIP : The final step can be condensed. -/
example {a b : ℝ} (h1 : a ^ 2 + b ^ 2 = 0) : a = 0 ∧ b = 0 := by
  have h2 : a ^ 2 = 0
  · apply le_antisymm
    calc
      a ^ 2 ≤ a ^ 2 + b ^ 2 := by nlinarith
      _ = 0 := by rw [h1]
    nlinarith
  have h3 : b ^ 2 = 0
  · apply le_antisymm
    calc
      b ^ 2 ≤ a ^ 2 + b ^ 2 := by nlinarith
      _ = 0 := by rw [h1]
    nlinarith
  exact ⟨pow_eq_zero h2, pow_eq_zero h3⟩

-- 2.4.5 Exercises
-- 1
example {a b : ℚ} (H : a ≤ 1 ∧ a + b ≤ 3) : 2 * a + b ≤ 4 := by nlinarith
-- 2
example {r s : ℝ} (H : r + s ≤ 1 ∧ r - s ≤ 5) : 2 * r ≤ 6 := by nlinarith
-- 3
example {m n : ℤ} (H : n ≤ 8 ∧ m + 5 ≤ n) : m ≤ 3 := by nlinarith
-- 4
example {p : ℤ} (hp : p + 2 ≥ 9) : p ^ 2 ≥ 49 ∧ 7 ≤ p := by
  have h1 : 7 ≤ p := (Int.add_le_add_iff_right 2).mp hp
  have h2 : 49 ≤ p ^ 2 :=
    calc
      49 = 7 * 7 := by ring
      _  ≤ p ^ 2 := by rw [sq]; rel [h1]
  exact ⟨h2, h1⟩
-- 5
example {a : ℚ} (h : a - 1 ≥ 5) : a ≥ 6 ∧ 3 * a ≥ 10 := by
  have h' : a ≥ 6 := by linarith
  constructor
  · exact h'
  · calc
      3 * a ≥ 3 * 6 := by rel [h']
      _     ≥ 10 := by norm_num
-- 6
example {x y : ℚ} (h : x + y = 5 ∧ x + 2 * y = 7) : x = 3 ∧ y = 2 := by
  obtain ⟨h1, h2⟩ := h
  constructor
  · calc
      x = - ((x + 2 * y) - 2 * (x + y)) := by ring
      _ = - (7 - 2 * 5) := by rw [h1, h2]
      _ = 3 := by norm_num
  · calc
      y = (x + 2 * y) - (x + y) := by ring
      _ = 2 := by rw [h1, h2]; rfl
-- 7
example {a b : ℝ} (h1 : a * b = a) (h2 : a * b = b) :
    a = 0 ∧ b = 0 ∨ a = 1 ∧ b = 1 := by
  simp_all only [and_self]
  subst h1
  exact IsIdempotentElem.iff_eq_zero_or_one.mp h2
/-! TIP : `aesop?` and `apply?` were used to get the tactics above. -/

-- 2.5.2 Example
example {t : ℝ} (h : ∃ a : ℝ, a * t < 0) : t ≠ 0 := by
  obtain ⟨x, hxt⟩ := h
  have H := le_or_gt x 0
  obtain hx | hx := H <;>
  nlinarith

-- 2.5.5 Example
example : ∃ m n : ℤ, m ^ 2 - n ^ 2 = 11 := by
  use 6
  use 5
  ring
/-! TIP : Existential witnesses can be put into `exact` statements. -/
example : ∃ m n : ℤ, m ^ 2 - n ^ 2 = 11 := by exact ⟨6, 5, rfl⟩
/-! TIP : The `exact` is not necessary either. -/
example : ∃ m n : ℤ, m ^ 2 - n ^ 2 = 11 := ⟨6, 5, rfl⟩

-- 2.5.6 Example
example (a : ℤ) : ∃ m n : ℤ, m ^ 2 - n ^ 2 = 2 * a + 1 := by
  use (a + 1)
  use a
  ring
/-! TIP : A tactic can be applied in the shortened `exact` statement using a `by`. -/
example (a : ℤ) : ∃ m n : ℤ, m ^ 2 - n ^ 2 = 2 * a + 1 := ⟨(a + 1), a, by ring⟩

-- 2.5.7 Example
example {p q : ℝ} (h : p < q) : ∃ x, p < x ∧ x < q := by
  use (p + q) / 2
  constructor <;> nlinarith

-- 2.5.8 Exercises
-- 1
example : ∃ t : ℚ, t ^ 2 = 1.69 := ⟨(1.3 : ℚ), by norm_num⟩
-- 2
example : ∃ m n : ℤ, m ^ 2 + n ^ 2 = 85 := ⟨7, 6, rfl⟩
-- 3
example : ∃ x : ℝ, x < 0 ∧ x ^ 2 < 1 := ⟨(- 1 / 2 : ℝ), by nlinarith, by nlinarith⟩
-- 4
example : ∃ a b : ℕ, 2 ^ a = 5 * b + 1 := ⟨4, 3, rfl⟩
-- 5
example (x : ℚ) : ∃ y : ℚ, y ^ 2 > x := by
  use (x + 1)
  ring_nf
  nlinarith
-- 6
/-! TIP : A simple way to prove this statement is through contradiction. -/
example {t : ℝ} (h : ∃ a : ℝ, a * t + 1 < a + t) : t ≠ 1 := by
  obtain ⟨a, ha⟩ := h
  intro ht
  rw [ht, mul_one] at ha
  have ha1 : a + 1 = a + 1 := rfl
  have ha2 : a + 1 ≠ a + 1 := ne_of_lt ha
  contradiction
-- 7
example {m : ℤ} (h : ∃ a, 2 * a = m) : m ≠ 5 := by
  obtain ⟨a, ha⟩ := h
  intro hm
  rw [hm] at ha
  by_cases h : a ≤ 2
  · have _ : 2 * a ≤ 4 := by nlinarith
    have h1 : 2 * a ≠ 5 := by nlinarith
    contradiction
  · rw [Int.not_le] at h
    have _ : 3 ≤ a := h
    have _ : 6 ≤ 2 * a := by linarith
    have h1 : 2 * a ≠ 5 := by linarith
    contradiction
-- 8
example {n : ℤ} : ∃ a, 2 * a ^ 3 ≥ n * a + 7 := by
  use (n ^ 2 + 2)
  ring_nf!
  have _ : 0 ≤ n ^ 2 * 24 := by nlinarith
  have h1 : 0 ≤ n ^ 4 * 12 := by nlinarith
  have h2 : 0 ≤ n ^ 6 * 2 := by nlinarith
  by_cases hn : n ≤ 0
  · simp only [ge_iff_le]
    nlinarith
  · rw [not_le] at hn
    nlinarith
-- 9
example {a b c : ℝ} (ha : a ≤ b + c) (hb : b ≤ a + c) (hc : c ≤ a + b) :
    ∃ x y z, x ≥ 0 ∧ y ≥ 0 ∧ z ≥ 0 ∧ a = y + z ∧ b = x + z ∧ c = x + y := by
  use (-a + b + c) / 2, (a - b + c) / 2, (a + b - c) / 2
  repeat (first | constructor; nlinarith)
  ring
